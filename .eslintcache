[{"C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\index.js":"1","C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Game.js":"2","C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Board.js":"3","C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\PengineClient.js":"4","C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Square.js":"5"},{"size":186,"mtime":1649938290176,"results":"6","hashOfConfig":"7"},{"size":11802,"mtime":1651777555957,"results":"8","hashOfConfig":"7"},{"size":734,"mtime":1651606795183,"results":"9","hashOfConfig":"7"},{"size":2276,"mtime":1649938290174,"results":"10","hashOfConfig":"7"},{"size":983,"mtime":1651606795208,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"i4yak",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\index.js",[],["26","27"],"C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Game.js",["28","29","30"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\n\r\n/**\r\n * List of colors.\r\n */\r\n\r\nconst colors = [\"r\", \"v\", \"p\", \"g\", \"b\", \"y\"];  // red, violet, pink, green, blue, yellow\r\n\r\n/**\r\n * Returns the CSS representation of the received color.\r\n */\r\n\r\nexport function colorToCss(color) {\r\n  switch (color) {\r\n    case \"r\": return \"#FF6666\";\r\n    case \"v\": return \"#B266FF\";\r\n    case \"p\": return \"#FFCCE5\";\r\n    case \"g\": return \"#99FF99\";\r\n    case \"b\": return \"#6666FF\";\r\n    case \"y\": return \"#FFFF99\";\r\n  }\r\n  return color;\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      turns: 0,\r\n      adyacentes: 0, // Almacena la cantidad de adyacentes a la celda origen.\r\n      origenColor: null, // Color de la celda origen\r\n      origenFila: 1, // Posicion i de la celda origen\r\n      origenColumna: 1, // Posicion j de la celda origen\r\n      grid: null,\r\n      jugadas: \"\", // String para el historial de jugadas\r\n      complete: false,  // true if game is complete, false otherwise\r\n      waiting: false,\r\n      selecciono: false // true si selecciono la celda de origen\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    this.pengine = new PengineClient(this.handlePengineCreate);\r\n  }\r\n\r\n  handlePengineCreate() {\r\n    const queryS = 'init(Grid)';\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid']\r\n        });\r\n        \r\n      } \r\n    });\r\n  }\r\n  \r\n  handleClick(color) {\r\n    // No action on click if game is complete or we are waiting.\r\n    if (this.state.waiting) {\r\n     // alert(\"Se está evaluando una jugada. Por favor, espere para continuar con el juego...\");\r\n      return;\r\n    } else if(this.state.complete) {\r\n     // alert(\"El juego ya está completo.\");\r\n      return;\r\n    }\r\n    // Build Prolog query to apply the color flick.\r\n    // The query will be like:\r\n    // flick([[g,g,b,g,v,y,p,v,b,p,v,p,v,r],\r\n    //        [r,r,p,p,g,v,v,r,r,b,g,v,p,r],\r\n    //        [b,v,g,y,b,g,r,g,p,g,p,r,y,y],\r\n    //        [r,p,y,y,y,p,y,g,r,g,y,v,y,p],\r\n    //        [y,p,y,v,y,g,g,v,r,b,v,y,r,g],\r\n    //        [r,b,v,g,b,r,y,p,b,p,y,r,y,y],\r\n    //        [p,g,v,y,y,r,b,r,v,r,v,y,p,y],\r\n    //        [b,y,v,g,r,v,r,g,b,y,b,y,p,g],\r\n    //        [r,b,b,v,g,v,p,y,r,v,r,y,p,g],\r\n    //        [v,b,g,v,v,r,g,y,b,b,b,b,r,y],\r\n    //        [v,v,b,r,p,b,g,g,p,p,b,y,v,p],\r\n    //        [r,p,g,y,v,y,r,b,v,r,b,y,r,v],\r\n    //        [r,b,b,v,p,y,p,r,b,g,p,y,b,r],\r\n    //        [v,g,p,b,v,v,g,g,g,b,v,g,g,g]],r, Grid)\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n    const queryS = \"flick(\" + gridS + \",\" + color + \", Grid, (\"+this.state.origenColor+\",\"+this.state.origenFila+\",\"+this.state.origenColumna+\"))\"; \r\n    this.setState({\r\n      waiting: true\r\n    });\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          origenColor: color,\r\n          turns: this.state.turns + 1,\r\n          jugadas: this.state.jugadas + \"\" + color,\r\n          waiting: false\r\n        });\r\n\r\n        // Calcula la cantidad de adyacentes que hay después de pintar\r\n        const gridNueva = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n        const queryAdyacentes = \"cantidadAdyacentes(\" + gridNueva + \",\" +\"(\"+this.state.origenColor+\",\"+this.state.origenFila+\",\"+this.state.origenColumna+\"), N)\"; \r\n        this.setState({\r\n          waiting: true\r\n        });\r\n        this.pengine.query(queryAdyacentes, (success, response) => {\r\n          if (success) {\r\n            this.setState({\r\n              adyacentes: response['N'],\r\n              waiting: false\r\n            });\r\n          }  \r\n        });\r\n\r\n        // Comprueba si ganó el juego\r\n        const queryGano = \"gano(\"+gridNueva+\")\"; \r\n        this.setState({\r\n          waiting: true\r\n        });\r\n        this.pengine.query(queryGano, (success, response) => {\r\n          if (success) {\r\n            this.setState({\r\n              complete: true,\r\n              waiting: false\r\n            });\r\n            //alert(\"Ganaste el juego!\");\r\n          } else{\r\n            this.setState({\r\n              waiting: false\r\n            });\r\n          }  \r\n        });\r\n\r\n      } else {\r\n        // Prolog query will fail when the clicked color coincides with that in the top left cell.\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  clickOrigen(c, i, j){\r\n    if(this.state.selecciono === false) {\r\n      this.setState({ \r\n        // En prolog la primera fila o primer columna no empieza de 0, si no de 1\r\n        origenFila: i+1,\r\n        origenColumna: j+1, \r\n        origenColor: c,\r\n        selecciono: true\r\n      });\r\n\r\n      // Comprueba, por excepción, si en la grilla inicial según la celda origen que se seleccionó hay adyacentes o está \"ganada\" (todos las celdas son iguales) \r\n\r\n      // Calcula la cantidad de adyacentes que hay después de pintar\r\n      const gridNueva = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n      const queryAdyacentes = \"cantidadAdyacentes(\" + gridNueva + \",\" +\"(\"+c+\",\"+ (i+1) +\",\"+ (j+1) +\"), N)\"; \r\n      this.setState({\r\n        waiting: true\r\n      });\r\n      this.pengine.query(queryAdyacentes, (success, response) => {\r\n        if (success) {\r\n          this.setState({\r\n            adyacentes: response['N'],\r\n            waiting: false\r\n          });\r\n        }  \r\n      });\r\n\r\n      // Comprueba si ganó el juego\r\n      const queryGano = \"gano(\"+gridNueva+\")\"; \r\n      this.setState({\r\n        waiting: true\r\n      });\r\n      this.pengine.query(queryGano, (success, response) => {\r\n        if (success) {\r\n          this.setState({\r\n            complete: true,\r\n            waiting: false\r\n          });\r\n          //alert(\"Ganaste el juego!\");\r\n        } else{\r\n          this.setState({\r\n            waiting: false\r\n          });\r\n        }  \r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n\r\n    if(this.state.selecciono === true) {\r\n      if(this.state.complete === false){ // Jugando\r\n        return (\r\n          <div className=\"game\">\r\n            <div className=\"leftPanel\">\r\n              <div className=\"buttonsPanel\">\r\n                {colors.map(color =>\r\n                  <button\r\n                    className=\"colorBtn\"\r\n                    style={{ backgroundColor: colorToCss(color) ,\r\n                      borderRadius: '5px'\r\n                    }}\r\n                    onClick={() => this.handleClick(color)}\r\n                    key={color}\r\n                  />)}\r\n              </div>\r\n              <div><br></br><center><button \r\n                style={{ backgroundColor: '#4CAF50',\r\n                  fontSize: '16px',\r\n                  color: 'White',\r\n                  borderColor: 'Black',\r\n                  borderRadius: '5px',\r\n                  textAlign: 'center',\r\n                  textDecoration: 'none',\r\n                  padding: '15px 32px'\r\n                }}\r\n                onClick={() => window.location.reload()}>Reiniciar juego</button></center></div>\r\n              <div className=\"turnsPanel\">\r\n              <div className=\"adyacentesLab\">Jugadas</div>\r\n                <div className=\"turnsNum\">{this.state.turns}</div>\r\n                <div className=\"adyacentesLab\">Adyacentes actuales</div>\r\n                <div className=\"turnsNum\">{this.state.adyacentes}</div>\r\n                <div className=\"adyacentesLab\"><br></br>Historial de jugadas</div>\r\n                <div class=\"caja\">\r\n                  {this.state.jugadas.split('').map((colorHistorial) => \r\n                  <div \r\n                    style={{ backgroundColor: colorToCss(colorHistorial),\r\n                    width: '7px',\r\n                    border: '1px solid #606060',\r\n                    borderRadius: '5px',\r\n                    padding: '10px',\r\n                    margin: '13px'}} />\r\n                  )}\r\n                </div>\r\n                  \r\n            </div>\r\n            \r\n            </div>\r\n            <Board grid={this.state.grid} origenFila={this.state.origenFila} origenColumna={this.state.origenColumna} onClick={(c,i,j) => this.clickOrigen(c, i,j)}/>\r\n            \r\n          </div>\r\n           \r\n        );\r\n      } else {\r\n        return ( // Si el juego está completo, renderiza un cartel de \"juego completo\"\r\n          <div className=\"game\">\r\n            <div className=\"leftPanel\">\r\n              <div className=\"buttonsPanel\">\r\n                {colors.map(color =>\r\n                  <button\r\n                    className=\"colorBtn\"\r\n                    style={{ backgroundColor: colorToCss(color) ,\r\n                      borderRadius: '5px'\r\n                    }}\r\n                    onClick={() => this.handleClick(color)}\r\n                    key={color}\r\n                  />)}\r\n              </div>\r\n              <div><br></br><center><button \r\n                style={{ backgroundColor: '#4CAF50',\r\n                  fontSize: '16px',\r\n                  color: 'White',\r\n                  borderColor: 'Black',\r\n                  borderRadius: '5px',\r\n                  textAlign: 'center',\r\n                  textDecoration: 'none',\r\n                  padding: '15px 32px'\r\n              }}\r\n                onClick={() => window.location.reload()}>Reiniciar juego</button></center></div>\r\n\r\n              <div className=\"turnsPanel\">\r\n              <div className=\"adyacentesLab\" style={{color: 'green'}}>Juego completado!</div>\r\n                <div className=\"adyacentesLab\"><br></br>Jugadas</div>\r\n                <div className=\"turnsNum\">{this.state.turns}</div>\r\n                <div className=\"adyacentesLab\">Adyacentes actuales</div>\r\n                <div className=\"turnsNum\">{this.state.adyacentes}</div>\r\n                <div className=\"adyacentesLab\"><br></br>Historial de jugadas</div>\r\n                <div class=\"caja\">\r\n                  {this.state.jugadas.split('').map((colorHistorial) => \r\n                  <div \r\n                    style={{ backgroundColor: colorToCss(colorHistorial),\r\n                    width: '7px',\r\n                    border: '1px solid #606060',\r\n                    borderRadius: '5px',\r\n                    padding: '10px',\r\n                    margin: '13px'}} />\r\n                  )}\r\n                </div>\r\n                  \r\n            </div>\r\n            </div>\r\n            <Board grid={this.state.grid} origenFila={this.state.origenFila} origenColumna={this.state.origenColumna} onClick={(c, i,j) => this.clickOrigen(c, i,j)}/>\r\n            \r\n          </div>\r\n          \r\n        );\r\n      }\r\n    } else{ // Inicio de juego\r\n      \r\n      setTimeout(() => { \r\n        if(this.state.selecciono === false) {\r\n          this.setState({\r\n            selecciono: true,\r\n            origenColor: JSON.stringify(this.state.grid).charAt(3),\r\n          });\r\n        }\r\n      }, 10000);\r\n\r\n      /*\r\n\r\n        Aca va el código del timeout\r\n\r\n      */\r\n\r\n      return(\r\n      <div className=\"game\">\r\n         <center>Para comenzar, selecciona la celda origen\r\n          <Board grid={this.state.grid} origenFila={1} origenColumna={1} onClick={(c, i,j) => this.clickOrigen(c, i,j)}/>\r\n          <i>Por defecto, la celda origen es la superior izquierda. (Si en 10 segundos no se selecciona otra celda, esta será la celda origen)</i>\r\n          </center>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  // OBS: En el board se pasa la celda origen para visualizar en el tablero diferente a dicha celda.\r\n}\r\n\r\n\r\nexport default Game;","C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Board.js",[],"C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\PengineClient.js",[],"C:\\Users\\usuario\\Documents\\UNS\\3ro\\Logica\\Proyecto\\src\\Square.js",["31"],"import React from 'react';\r\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react-dom';\r\nimport { colorToCss } from './Game';\r\n\r\nclass Square extends React.Component {\r\n\r\n    render() {\r\n        if(this.props.origen === false){\r\n            return ( // estilo para las celdas que no son origen\r\n                <div \r\n                onClick={this.props.onClick}\r\n                style={{ backgroundColor: colorToCss(this.props.value),\r\n                    border: '1px solid #606060',\r\n                    borderRadius: '5px'\r\n\r\n                }} />\r\n            );\r\n        } else {\r\n            return ( // estilo para la celda origen\r\n                <div  \r\n                onClick={this.props.onClick}\r\n                style={{ backgroundColor: colorToCss(this.props.value),\r\n                    border: '3px solid #000000', \r\n                    borderRadius: '5px'\r\n                }}></div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Square;",["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":16,"column":3,"nodeType":"40","messageId":"41","endLine":23,"endColumn":4},{"ruleId":"42","severity":1,"message":"43","line":105,"column":73,"nodeType":"44","messageId":"45","endLine":105,"endColumn":74},{"ruleId":"42","severity":1,"message":"43","line":160,"column":71,"nodeType":"44","messageId":"45","endLine":160,"endColumn":72},{"ruleId":"46","severity":1,"message":"47","line":2,"column":10,"nodeType":"48","messageId":"49","endLine":2,"endColumn":60},{"ruleId":"34","replacedBy":"50"},{"ruleId":"36","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]